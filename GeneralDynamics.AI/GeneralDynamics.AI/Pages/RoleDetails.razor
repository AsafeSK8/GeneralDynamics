@*@page "/userdetails"
@page "/userdetails/{id:int}"
@using System.ComponentModel.DataAnnotations

<BSForm Model="@role" IsRow="true" Gutters="Gutters.Medium" OnSubmit="SaveUser" OnReset="Reset">
    <DataAnnotationsValidator />
    <BSCol Position="Position.Relative" ColumnMedium="12">
        @_message
        <BSValidationSummary />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>First name</BSLabel>
        <BSInput InputType="InputType.Text" @bind-Value="role.Name" ValidateOnInput="true" />
        <BSFeedback For="@(() => role.Name)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Last name</BSLabel>
        <BSInput InputType="InputType.Text" @bind-Value="role.LastName" />
        <BSFeedback For="@(() => role.LastName)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Email Address</BSLabel>
        <BSInput InputType="InputType.Email" @bind-Value="role.Email" placeholder="Email Address" />
        <BSFeedback For="@(() => role.Email)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Phone</BSLabel>
        <BSInput InputType="InputType.Tel" @bind-Value="role.Phone" placeholder="Phone" />
        <BSFeedback For="@(() => role.Phone)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Username</BSLabel>
        <BSInput InputType="InputType.Text" IsDisabled="disabled" @bind-Value="role.UserName" placeholder="Username" />
        <BSFeedback For="@(() => role.UserName)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Password</BSLabel>
        <BSInput InputType="InputType.Password" IsDisabled="disabled" @bind-Value="role.Password" placeholder="Email Address" />
        <BSFeedback For="@(() => role.Password)" ValidMessage="" />
    </BSCol>

    <AuthorizeView Roles="ADM">
        <Authorized>
            <BSLabel>Role</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="_value">
                @foreach (var rolex in roles)
                {
                    <option value="@rolex.Id">@rolex.Code</option>
                }
            </BSInput>
        </Authorized>
    </AuthorizeView>


    <AuthorizeView Roles="ADM, MAN">
        <Authorized>
            <BSCol Column="12">
                <BSButton Color="BSColor.Primary" IsSubmit="true">Submit</BSButton>
                <BSButton Color="BSColor.Primary" IsReset="true" @onclick="Reset">Reset</BSButton>
            </BSCol>
        </Authorized>
    </AuthorizeView>

    @{ if (disabled)
        {
            <AuthorizeView Roles="ADM">
                <Authorized>
                    <BSCol Column="12">
                        <BSButton Color="BSColor.Primary" IsDisabled="!disabled" @onclick="OpenDeleteModal">Delete User</BSButton>
                    </BSCol>
                </Authorized>
            </AuthorizeView>

        }
    }

    @code {

        [Parameter]
        public int id { get; set; }
        Role role = new Role();
        private string _message = "";
        bool disabled = false;
        List<Role> roles = new List<Role>();
        private int? _value;

        protected override async Task OnInitializedAsync()
        {
            if (id > 0)
            {
                disabled = true;
                var res = await UserService.GetUserById(id);
                if (role.Id > 0)
                {
                    _value = role.Id;
                }

            }

            var resRoles = await RoleService.GetAllRoles();
            roles = resRoles.Respuesta.ToList();
        }

        private async Task SaveUser(EditContext e)
        {
            if (e.Validate())
            {
                try
                {
                    var resultado = await RoleService.AddRole(role);

                    if (resultado.ResultadoOperacion)
                    {
                        Reset();
                        _message = "User added or updated successfully";
                    }
                    else
                    {
                        _message = resultado.Mensaje;
                    }
                }
                catch (Exception ex)
                {
                    _message = "Something went wrong... " + ex.Message;
                }
            }
        }

        public void Reset()
        {
            role = new Role();
        }

        public async Task OpenDeleteModal()
        {
            try
            {
                var resultado = await RoleService.DeleteRole(id);

                if (resultado.ResultadoOperacion)
                {
                    Reset();
                    _message = "User deleted successfully";
                    NavigationManager.NavigateTo("/userdetails");
                }
                else
                {
                    _message = resultado.Mensaje;
                }
            }
            catch (Exception ex)
            {
                _message = "Something went wrong... " + ex.Message;
            }
        }

    }*@
