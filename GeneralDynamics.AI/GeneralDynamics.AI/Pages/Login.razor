@layout LoginLayout
@page "/login"


<BSCard CardType="CardType.Card" style="width: 25rem;" class="center">
    <BSCard CardType="CardType.Image" src="Images/login.jpg" alt="Card image cap" asp-append-version="true" />
    <BSCard CardType="CardType.Body">

        <BSForm Model="userlogin" IsRow="true" Gutters="Gutters.Medium" OnSubmit="login">
            <DataAnnotationsValidator />

            <BSCard CardType="CardType.Title" Class="center">Leapsome</BSCard>
            <BSCard CardType="CardType.Text">

                <BSCol Position="Position.Relative" ColumnMedium="12">
                    @_message
                    <BSValidationSummary />
                </BSCol>

                <BSCol Position="Position.Relative" ColumnMedium="12">
                    <BSLabel>Username</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="userlogin.Username" ValidateOnInput="true" />
                    <BSFeedback For="@(() => userlogin.Username)" ValidMessage="" />
                </BSCol>

                <BSCol Position="Position.Relative" ColumnMedium="12">
                    <BSLabel>Password</BSLabel>
                    <BSInput InputType="InputType.Text" @bind-Value="userlogin.Password" ValidateOnInput="true" />
                    <BSFeedback For="@(() => userlogin.Password)" ValidMessage="" />
                </BSCol>

            </BSCard>

            <BSButton Color="BSColor.Primary" IsSubmit="true" Class="login-btn">Login</BSButton>
            <BSButton Color="BSColor.Info" Class="login-btn" OnClick="signIn">Sign in</BSButton>

        </BSForm>

    </BSCard>
</BSCard>

@code {

    private UserLogin userlogin;
    private string _message = "";
    private string token = "";

    protected override Task OnInitializedAsync()
    {
        userlogin = new UserLogin();
        return base.OnInitializedAsync();
    }

    private async Task login(EditContext e)
    {
        if (e.Validate())
        {
            // Do login
            // _message = "Submitted to database";

            try
            {
                var resultado = await SessionService.Login(userlogin);
                token = resultado.Respuesta;

                await localStorage.SetItemAsync("token", token);

                ((AuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(token);
                NavigationManager.NavigateTo("/");

            }
            catch (Exception ex)
            {
                _message = "Something went wrong... " + ex.Message;
            }

        }

    }

    private void signIn()
    {
        NavigationManager.NavigateTo("/signIn");
    }

}
