@page "/userdetails"
@page "/userdetails/{id:int}"
@using System.ComponentModel.DataAnnotations



<BSForm Model="@user" IsRow="true" Gutters="Gutters.Medium" OnSubmit="SaveUser" OnReset="Reset">
    <DataAnnotationsValidator />
    <BSCol Position="Position.Relative" ColumnMedium="12">
        @_message
        <BSValidationSummary />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>First name</BSLabel>
        <BSInput InputType="InputType.Text" @bind-Value="user.Name" ValidateOnInput="true" />
        <BSFeedback For="@(() => user.Name)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Last name</BSLabel>
        <BSInput InputType="InputType.Text" @bind-Value="user.LastName" />
        <BSFeedback For="@(() => user.LastName)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Email Address</BSLabel>
        <BSInput InputType="InputType.Email" @bind-Value="user.Email" placeholder="Email Address" />
        <BSFeedback For="@(() => user.Email)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Phone</BSLabel>
        <BSInput InputType="InputType.Tel" @bind-Value="user.Phone" placeholder="Phone" />
        <BSFeedback For="@(() => user.Phone)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Username</BSLabel>
        <BSInput InputType="InputType.Text" IsDisabled="disabled" @bind-Value="user.UserName" placeholder="Username" />
        <BSFeedback For="@(() => user.UserName)" ValidMessage="" />
    </BSCol>
    <BSCol Position="Position.Relative" ColumnMedium="4">
        <BSLabel>Password</BSLabel>
        <BSInput InputType="InputType.Password" IsDisabled="disabled" @bind-Value="user.Password" placeholder="Email Address" />
        <BSFeedback For="@(() => user.Password)" ValidMessage="" />
    </BSCol>

    <AuthorizeView Roles="ADM">
        <Authorized>
            <BSLabel>Role</BSLabel>
            <BSInput InputType="InputType.Select" @bind-Value="_value">
                @foreach (var rolex in roles)
                {
                    <option value="@rolex.Id">@rolex.Code</option>
                }
            </BSInput>
        </Authorized>
    </AuthorizeView>


    <AuthorizeView Roles="ADM, MAN">
        <Authorized>
            <BSCol Column="12">
                <BSButton Color="BSColor.Primary" IsSubmit="true">Submit</BSButton>
                <BSButton Color="BSColor.Primary" IsReset="true" @onclick="Reset">Reset</BSButton>
            </BSCol>
        </Authorized>
    </AuthorizeView>

    @{ if (disabled)
        {
            <AuthorizeView Roles="ADM">
                <Authorized>
                    <BSCol Column="12">
                        <BSButton Color="BSColor.Primary" IsDisabled="!disabled" @onclick="OpenDeleteModal" >Delete User</BSButton>
                    </BSCol>
                </Authorized>
            </AuthorizeView>

        }
    }



</BSForm>

@code {

    [Parameter]
    public int id { get; set; }
    User user = new User();
    private string _message = "";
    bool disabled = false;
    List<Role> roles = new List<Role>();
    private int? _value;

    protected override async Task OnInitializedAsync()
    {
        if (id > 0)
        {
            disabled = true;
            var res = await UserService.GetUserById(id);
            user = res.Respuesta;
            if (user.RoleId != null)
            {
                _value = user.RoleId;
            }

        }

        var resRoles = await RoleService.GetAllRoles();
        roles = resRoles.Respuesta.ToList();
    }

    private async Task SaveUser(EditContext e)
    {
        if (e.Validate())
        {
            try
            {
                user.RoleId = _value;
                var resultado = await UserService.AddUser(user);

                if (resultado.ResultadoOperacion)
                {
                    Reset();
                    _message = "User added or updated successfully";
                }
                else
                {
                    _message = resultado.Mensaje;
                }
            }
            catch (Exception ex)
            {
                _message = "Something went wrong... " + ex.Message;
            }
        }
    }

    public void Reset()
    {
        user = new User();
    }

    public async Task OpenDeleteModal()
    {
        try
        {
            var resultado = await UserService.DeleteUser(id);

            if (resultado.ResultadoOperacion)
            {
                Reset();
                _message = "User deleted successfully";
                NavigationManager.NavigateTo("/userdetails");
            }
            else
            {
                _message = resultado.Mensaje;
            }
        }
        catch (Exception ex)
        {
            _message = "Something went wrong... " + ex.Message;
        }
    }

}
